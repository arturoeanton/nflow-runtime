diff --git a/main.go b/main.go
index 03dc42d..f94108b 100755
--- a/main.go
+++ b/main.go
@@ -18,6 +18,7 @@ import (
 	"github.com/arturoeanton/nFlow/pkg/commons"
 	"github.com/arturoeanton/nFlow/pkg/playbook"
 	"github.com/arturoeanton/nFlow/pkg/process"
+	"github.com/arturoeanton/nFlow/pkg/syncsession"
 
 	"github.com/google/uuid"
 	"github.com/labstack/echo/v4"
@@ -80,9 +81,14 @@ func run(c echo.Context) error {
 	}
 
 	if nflow_next_node_run == "" {
-		s, _ := session.Get("nflow_form", c)
-		s.Values = make(map[interface{}]interface{})
-		s.Save(c.Request(), c.Response())
+		func() {
+			syncsession.EchoSessionsMutex.Lock()
+			defer syncsession.EchoSessionsMutex.Unlock()
+			s, _ := session.Get("nflow_form", c)
+			s.Values = make(map[interface{}]interface{})
+			s.Save(c.Request(), c.Response())
+		}()
+
 	}
 
 	runeable, vars, code, _, err := playbook.GetWorkflow(c, playbooks[appJson], endpoint, c.Request().Method, appJson)
diff --git a/pkg/commons/session.go b/pkg/commons/session.go
index d7e5890..b9ea553 100644
--- a/pkg/commons/session.go
+++ b/pkg/commons/session.go
@@ -9,7 +9,6 @@ import (
 )
 
 func GetSessionStore(pgSessionConfig *playbook.PgSessionConfig) sessions.Store {
-
 	if pgSessionConfig.Url != "" {
 		log.Println("pg session")
 		store, err := customsession.NewPostgresStore(
diff --git a/pkg/playbook/feature_session.go b/pkg/playbook/feature_session.go
index 6e12dd9..776ff7b 100755
--- a/pkg/playbook/feature_session.go
+++ b/pkg/playbook/feature_session.go
@@ -4,6 +4,7 @@ import (
 	"encoding/json"
 	"fmt"
 
+	"github.com/arturoeanton/nFlow/pkg/syncsession"
 	"github.com/dop251/goja"
 	"github.com/labstack/echo-contrib/session"
 	"github.com/labstack/echo/v4"
@@ -11,18 +12,24 @@ import (
 
 func addFeatureSession(vm *goja.Runtime, c echo.Context) {
 	vm.Set("set_session", func(name, k, v string) {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		s, _ := session.Get(name, c)
 		s.Values[k] = v
 		s.Save(c.Request(), c.Response())
 	})
 
 	vm.Set("get_session", func(name, k string) string {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		s, _ := session.Get(name, c)
 		r := fmt.Sprint(s.Values[k])
 		return r
 	})
 
 	vm.Set("open_session", func(name string) *map[string]interface{} {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		s, _ := session.Get(name, c)
 		var r = make(map[string]interface{})
 		for k, v := range s.Values {
@@ -32,6 +39,8 @@ func addFeatureSession(vm *goja.Runtime, c echo.Context) {
 	})
 
 	vm.Set("save_session", func(name string, m map[string]interface{}) {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		s, _ := session.Get(name, c)
 		for k, v := range m {
 			s.Values[k] = v
@@ -40,6 +49,8 @@ func addFeatureSession(vm *goja.Runtime, c echo.Context) {
 	})
 
 	vm.Set("delete_session", func(name string) {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		s, _ := session.Get(name, c)
 		for k := range s.Values {
 			delete(s.Values, k)
@@ -48,6 +59,8 @@ func addFeatureSession(vm *goja.Runtime, c echo.Context) {
 	})
 
 	vm.Set("delete_session_form", func() {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		s, _ := session.Get("nflow_form", c)
 		for k := range s.Values {
 			delete(s.Values, k)
@@ -56,6 +69,8 @@ func addFeatureSession(vm *goja.Runtime, c echo.Context) {
 	})
 
 	vm.Set("open_session_form", func() *map[string]interface{} {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		s, _ := session.Get("nflow_form", c)
 		var r = make(map[string]interface{})
 		for k, v := range s.Values {
@@ -65,6 +80,8 @@ func addFeatureSession(vm *goja.Runtime, c echo.Context) {
 	})
 
 	vm.Set("set_profile", func(v map[string]string) {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		s, _ := session.Get("auth-session", c)
 		value, _ := json.Marshal(v)
 		s.Values["profile"] = string(value)
@@ -76,6 +93,8 @@ func addFeatureSession(vm *goja.Runtime, c echo.Context) {
 	})
 
 	vm.Set("exist_profile", func() bool {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		s, _ := session.Get("auth-session", c)
 		var v map[string]string
 		if s.Values["profile"] != nil {
@@ -88,6 +107,8 @@ func addFeatureSession(vm *goja.Runtime, c echo.Context) {
 	})
 
 	vm.Set("delete_profile", func() {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		s, _ := session.Get("auth-session", c)
 		delete(s.Values, "profile")
 		s.Save(c.Request(), c.Response())
@@ -96,6 +117,8 @@ func addFeatureSession(vm *goja.Runtime, c echo.Context) {
 }
 
 func GetProfile(c echo.Context) map[string]string {
+	syncsession.EchoSessionsMutex.Lock()
+	defer syncsession.EchoSessionsMutex.Unlock()
 	s, _ := session.Get("auth-session", c)
 	var v map[string]string
 	if s.Values["profile"] != nil {
diff --git a/pkg/playbook/playbook.go b/pkg/playbook/playbook.go
index 9d3f635..1c20347 100755
--- a/pkg/playbook/playbook.go
+++ b/pkg/playbook/playbook.go
@@ -9,6 +9,7 @@ import (
 	"net/http"
 	"strings"
 
+	"github.com/arturoeanton/nFlow/pkg/syncsession"
 	"github.com/labstack/echo-contrib/session"
 	"github.com/labstack/echo/v4"
 )
@@ -97,12 +98,17 @@ func GetWorkflow(c echo.Context, playbooks map[string]map[string]*Playbook, wfPa
 								if reset_order_box == "true" {
 									if typeItem == "starter" {
 										// Check if is a new session and reset order_box log-session
-										log_session, err := session.Get("log-session", c)
-										if err != nil {
-											log.Println(err)
-										}
-										log_session.Values["order_box"] = 0
-										log_session.Save(c.Request(), c.Response())
+										func() {
+											syncsession.EchoSessionsMutex.Lock()
+											defer syncsession.EchoSessionsMutex.Unlock()
+											log_session, err := session.Get("log-session", c)
+											if err != nil {
+												log.Println(err)
+											}
+											log_session.Values["order_box"] = 0
+											log_session.Save(c.Request(), c.Response())
+										}()
+
 									}
 								}
 							}
diff --git a/pkg/playbook/runner.go b/pkg/playbook/runner.go
index d812d1e..aacc95e 100755
--- a/pkg/playbook/runner.go
+++ b/pkg/playbook/runner.go
@@ -12,6 +12,7 @@ import (
 	"time"
 
 	"github.com/arturoeanton/nFlow/pkg/process"
+	"github.com/arturoeanton/nFlow/pkg/syncsession"
 	"github.com/dop251/goja"
 	"github.com/dop251/goja_nodejs/console"
 	"github.com/dop251/goja_nodejs/require"
@@ -68,9 +69,13 @@ func (cc *Controller) run(c echo.Context, vars Vars, next string, uuid1 string,
 		p.Close()
 	}()
 
-	if c.Response().Header().Get("Nflow-Wid-1") == "" {
-		c.Response().Header().Add("Nflow-Wid-1", uuid1)
-	}
+	func(uuid1 string) {
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
+		if c.Response().Header().Get("Nflow-Wid-1") == "" {
+			c.Response().Header().Add("Nflow-Wid-1", uuid1)
+		}
+	}(uuid1)
 
 	vm := goja.New()
 
@@ -130,16 +135,18 @@ func (cc *Controller) run(c echo.Context, vars Vars, next string, uuid1 string,
 		}
 		if flagString != "false" {
 			//execute auth of default.js
-			auth_session, err := session.Get("auth-session", c)
-			if err != nil {
-				c.JSON(http.StatusInternalServerError, echo.Map{"error": err.Error()})
-				return nil
-			}
+			var profile interface{}
+			func() {
+				syncsession.EchoSessionsMutex.Lock()
+				defer syncsession.EchoSessionsMutex.Unlock()
+				auth_session, _ := session.Get("auth-session", c)
 
-			auth_session.Values["redirect_url"] = c.Request().URL.Path
-			auth_session.Save(c.Request(), c.Response())
+				auth_session.Values["redirect_url"] = c.Request().URL.Path
+				auth_session.Save(c.Request(), c.Response())
+
+				profile = auth_session.Values["profile"]
+			}()
 
-			profile := auth_session.Values["profile"]
 			vm.Set("profile", profile)
 			vm.Set("next", next)
 			vm.Set("auth_flag", flagString)
@@ -194,26 +201,27 @@ func (cc *Controller) step(c echo.Context, vm *goja.Runtime, next string, vars V
 	sbLog := strings.Builder{}
 	connection_next := "output_1"
 
-	log_session, err := session.Get("log-session", c)
-	if err != nil {
-		log.Println(err)
-	}
-	if log_session.Values["log_id"] == nil {
-		log_session.Values["log_id"] = uuid.New().String()
-		log_session.Values["order_box"] = 0
-	}
-
 	var log_id string
 	var order_box int
 
 	func() {
-
+		syncsession.EchoSessionsMutex.Lock()
+		defer syncsession.EchoSessionsMutex.Unlock()
 		defer func() {
 			if err := recover(); err != nil {
 				log.Println(err)
 			}
 		}()
 
+		log_session, err := session.Get("log-session", c)
+		if err != nil {
+			log.Println(err)
+		}
+		if log_session.Values["log_id"] == nil {
+			log_session.Values["log_id"] = uuid.New().String()
+			log_session.Values["order_box"] = 0
+		}
+
 		log_id = log_session.Values["log_id"].(string)
 		vm.Set("nflow_log_id", log_id)
 		order_box = log_session.Values["order_box"].(int) + 1
@@ -254,7 +262,12 @@ func (cc *Controller) step(c echo.Context, vm *goja.Runtime, next string, vars V
 				}
 			}
 
-			jsonPayload, err := json.Marshal(payload.Export())
+			var jsonPayload []byte
+			func() {
+				syncsession.PayloadSessionMutex.Lock()
+				defer syncsession.PayloadSessionMutex.Unlock()
+				jsonPayload, err = json.Marshal(payload.Export())
+			}()
 			if err != nil {
 				jsonPayload = []byte("{}")
 			}
@@ -432,6 +445,8 @@ func (cc *Controller) Execute(c echo.Context, vm *goja.Runtime, next string, var
 
 		wg.Add(1)
 		go func() {
+			syncsession.EchoSessionsMutex.Lock()
+			defer syncsession.EchoSessionsMutex.Unlock()
 			defer wg.Done()
 
 			var s *sessions.Session
@@ -459,7 +474,11 @@ func (cc *Controller) Execute(c echo.Context, vm *goja.Runtime, next string, var
 			payload_map := make(map[string]interface{})
 
 			if payload != nil {
-				payload_map = payload.Export().(map[string]interface{})
+				func() {
+					syncsession.PayloadSessionMutex.Lock()
+					defer syncsession.PayloadSessionMutex.Unlock()
+					payload_map = payload.Export().(map[string]interface{})
+				}()
 			}
 
 			for k, v := range s.Values {
@@ -469,7 +488,11 @@ func (cc *Controller) Execute(c echo.Context, vm *goja.Runtime, next string, var
 				payload_map[k.(string)] = v
 			}
 
-			payload = vm.ToValue(payload_map)
+			func() {
+				syncsession.PayloadSessionMutex.Lock()
+				defer syncsession.PayloadSessionMutex.Unlock()
+				payload = vm.ToValue(payload_map)
+			}()
 		}()
 		wg.Wait()
 
@@ -486,6 +509,8 @@ func (cc *Controller) Execute(c echo.Context, vm *goja.Runtime, next string, var
 			if rawPayload, ok := payload.Export().(map[string]interface{}); ok {
 				wg.Add(1)
 				go func() {
+					syncsession.EchoSessionsMutex.Lock()
+					defer syncsession.EchoSessionsMutex.Unlock()
 					defer wg.Done()
 					s, _ := session.Get("nflow_form", c)
 					for k, v := range rawPayload {
@@ -514,14 +539,16 @@ func (cc *Controller) Execute(c echo.Context, vm *goja.Runtime, next string, var
 	}
 
 	if next == "" && !fork {
-		s, _ := session.Get("nflow_form", c)
-		s.Values = make(map[interface{}]interface{})
-		s.Save(c.Request(), c.Response())
+		func() {
+			syncsession.EchoSessionsMutex.Lock()
+			defer syncsession.EchoSessionsMutex.Unlock()
+			s, _ := session.Get("nflow_form", c)
+			s.Values = make(map[interface{}]interface{})
+			s.Save(c.Request(), c.Response())
+		}()
 
 		currentProcess.State = "end"
 		currentProcess.Killeable = false
 		currentProcess.Close()
-
 	}
-
 }
diff --git a/pkg/playbook/vars_globals.go b/pkg/playbook/vars_globals.go
index c5a430e..15d3414 100755
--- a/pkg/playbook/vars_globals.go
+++ b/pkg/playbook/vars_globals.go
@@ -3,8 +3,10 @@ package playbook
 import (
 	"context"
 	"database/sql"
+	"net/url"
 	"time"
 
+	"github.com/arturoeanton/nFlow/pkg/syncsession"
 	"github.com/dop251/goja"
 	"github.com/go-redis/redis"
 	"github.com/labstack/echo-contrib/session"
@@ -27,6 +29,23 @@ func GetDB() (*sql.DB, error) {
 	return db, nil
 }
 
+func saveInSession(form url.Values, c echo.Context) {
+	syncsession.EchoSessionsMutex.Lock()
+	defer syncsession.EchoSessionsMutex.Unlock()
+	s, _ := session.Get("nflow_form", c)
+	for k, v := range form {
+		if k == "nflow_next_node_run" {
+			continue
+		}
+		if len(v) == 1 {
+			s.Values[k] = v[0]
+			continue
+		}
+		s.Values[k] = v
+	}
+	s.Save(c.Request(), c.Response())
+}
+
 func addGlobals(vm *goja.Runtime, c echo.Context) {
 	header := make(map[string][]string)
 	if c.Request().Header != nil {
@@ -40,18 +59,7 @@ func addGlobals(vm *goja.Runtime, c echo.Context) {
 		vm.Set("form", (map[string][]string)(form))
 	}
 
-	s, _ := session.Get("nflow_form", c)
-	for k, v := range form {
-		if k == "nflow_next_node_run" {
-			continue
-		}
-		if len(v) == 1 {
-			s.Values[k] = v[0]
-			continue
-		}
-		s.Values[k] = v
-	}
-	s.Save(c.Request(), c.Response())
+	saveInSession(form, c)
 
 	vm.Set("redis_hset", RedisClient.HSet)
 	vm.Set("redis_hget", RedisClient.HGet)
diff --git a/pkg/syncsession/syncsession.go b/pkg/syncsession/syncsession.go
new file mode 100644
index 0000000..6fa7bc0
--- /dev/null
+++ b/pkg/syncsession/syncsession.go
@@ -0,0 +1,6 @@
+package syncsession
+
+import "sync"
+
+var EchoSessionsMutex sync.Mutex
+var PayloadSessionMutex sync.Mutex